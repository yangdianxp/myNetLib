// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal.proto

#ifndef PROTOBUF_INCLUDED_internal_2eproto
#define PROTOBUF_INCLUDED_internal_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_internal_2eproto 

namespace protobuf_internal_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_internal_2eproto
namespace pb {
namespace internal {
class addr;
class addrDefaultTypeInternal;
extern addrDefaultTypeInternal _addr_default_instance_;
class logon;
class logonDefaultTypeInternal;
extern logonDefaultTypeInternal _logon_default_instance_;
class logon_ack;
class logon_ackDefaultTypeInternal;
extern logon_ackDefaultTypeInternal _logon_ack_default_instance_;
class register_info;
class register_infoDefaultTypeInternal;
extern register_infoDefaultTypeInternal _register_info_default_instance_;
class vid_range;
class vid_rangeDefaultTypeInternal;
extern vid_rangeDefaultTypeInternal _vid_range_default_instance_;
}  // namespace internal
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::internal::addr* Arena::CreateMaybeMessage<::pb::internal::addr>(Arena*);
template<> ::pb::internal::logon* Arena::CreateMaybeMessage<::pb::internal::logon>(Arena*);
template<> ::pb::internal::logon_ack* Arena::CreateMaybeMessage<::pb::internal::logon_ack>(Arena*);
template<> ::pb::internal::register_info* Arena::CreateMaybeMessage<::pb::internal::register_info>(Arena*);
template<> ::pb::internal::vid_range* Arena::CreateMaybeMessage<::pb::internal::vid_range>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {
namespace internal {

// ===================================================================

class logon : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.internal.logon) */ {
 public:
  logon();
  virtual ~logon();

  logon(const logon& from);

  inline logon& operator=(const logon& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  logon(logon&& from) noexcept
    : logon() {
    *this = ::std::move(from);
  }

  inline logon& operator=(logon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const logon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const logon* internal_default_instance() {
    return reinterpret_cast<const logon*>(
               &_logon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(logon* other);
  friend void swap(logon& a, logon& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline logon* New() const final {
    return CreateMaybeMessage<logon>(NULL);
  }

  logon* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<logon>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const logon& from);
  void MergeFrom(const logon& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(logon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // int32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // int32 type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.internal.logon)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_internal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class addr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.internal.addr) */ {
 public:
  addr();
  virtual ~addr();

  addr(const addr& from);

  inline addr& operator=(const addr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  addr(addr&& from) noexcept
    : addr() {
    *this = ::std::move(from);
  }

  inline addr& operator=(addr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const addr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const addr* internal_default_instance() {
    return reinterpret_cast<const addr*>(
               &_addr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(addr* other);
  friend void swap(addr& a, addr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline addr* New() const final {
    return CreateMaybeMessage<addr>(NULL);
  }

  addr* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<addr>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const addr& from);
  void MergeFrom(const addr& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // int32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // int32 type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.internal.addr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_internal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class logon_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.internal.logon_ack) */ {
 public:
  logon_ack();
  virtual ~logon_ack();

  logon_ack(const logon_ack& from);

  inline logon_ack& operator=(const logon_ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  logon_ack(logon_ack&& from) noexcept
    : logon_ack() {
    *this = ::std::move(from);
  }

  inline logon_ack& operator=(logon_ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const logon_ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const logon_ack* internal_default_instance() {
    return reinterpret_cast<const logon_ack*>(
               &_logon_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(logon_ack* other);
  friend void swap(logon_ack& a, logon_ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline logon_ack* New() const final {
    return CreateMaybeMessage<logon_ack>(NULL);
  }

  logon_ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<logon_ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const logon_ack& from);
  void MergeFrom(const logon_ack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(logon_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.internal.addr link_addr = 3;
  int link_addr_size() const;
  void clear_link_addr();
  static const int kLinkAddrFieldNumber = 3;
  ::pb::internal::addr* mutable_link_addr(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::internal::addr >*
      mutable_link_addr();
  const ::pb::internal::addr& link_addr(int index) const;
  ::pb::internal::addr* add_link_addr();
  const ::google::protobuf::RepeatedPtrField< ::pb::internal::addr >&
      link_addr() const;

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 central_id = 2;
  void clear_central_id();
  static const int kCentralIdFieldNumber = 2;
  ::google::protobuf::int32 central_id() const;
  void set_central_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.internal.logon_ack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::internal::addr > link_addr_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 central_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_internal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class register_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.internal.register_info) */ {
 public:
  register_info();
  virtual ~register_info();

  register_info(const register_info& from);

  inline register_info& operator=(const register_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  register_info(register_info&& from) noexcept
    : register_info() {
    *this = ::std::move(from);
  }

  inline register_info& operator=(register_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const register_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const register_info* internal_default_instance() {
    return reinterpret_cast<const register_info*>(
               &_register_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(register_info* other);
  friend void swap(register_info& a, register_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline register_info* New() const final {
    return CreateMaybeMessage<register_info>(NULL);
  }

  register_info* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<register_info>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const register_info& from);
  void MergeFrom(const register_info& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(register_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.internal.register_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_internal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class vid_range : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.internal.vid_range) */ {
 public:
  vid_range();
  virtual ~vid_range();

  vid_range(const vid_range& from);

  inline vid_range& operator=(const vid_range& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  vid_range(vid_range&& from) noexcept
    : vid_range() {
    *this = ::std::move(from);
  }

  inline vid_range& operator=(vid_range&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const vid_range& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const vid_range* internal_default_instance() {
    return reinterpret_cast<const vid_range*>(
               &_vid_range_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(vid_range* other);
  friend void swap(vid_range& a, vid_range& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline vid_range* New() const final {
    return CreateMaybeMessage<vid_range>(NULL);
  }

  vid_range* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<vid_range>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const vid_range& from);
  void MergeFrom(const vid_range& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(vid_range* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 begin = 1;
  void clear_begin();
  static const int kBeginFieldNumber = 1;
  ::google::protobuf::int32 begin() const;
  void set_begin(::google::protobuf::int32 value);

  // int32 end = 2;
  void clear_end();
  static const int kEndFieldNumber = 2;
  ::google::protobuf::int32 end() const;
  void set_end(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.internal.vid_range)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 begin_;
  ::google::protobuf::int32 end_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_internal_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// logon

// string ip = 1;
inline void logon::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& logon::ip() const {
  // @@protoc_insertion_point(field_get:pb.internal.logon.ip)
  return ip_.GetNoArena();
}
inline void logon::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.internal.logon.ip)
}
#if LANG_CXX11
inline void logon::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.internal.logon.ip)
}
#endif
inline void logon::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.internal.logon.ip)
}
inline void logon::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.internal.logon.ip)
}
inline ::std::string* logon::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:pb.internal.logon.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* logon::release_ip() {
  // @@protoc_insertion_point(field_release:pb.internal.logon.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void logon::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:pb.internal.logon.ip)
}

// int32 port = 2;
inline void logon::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 logon::port() const {
  // @@protoc_insertion_point(field_get:pb.internal.logon.port)
  return port_;
}
inline void logon::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:pb.internal.logon.port)
}

// int32 type = 3;
inline void logon::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 logon::type() const {
  // @@protoc_insertion_point(field_get:pb.internal.logon.type)
  return type_;
}
inline void logon::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.internal.logon.type)
}

// -------------------------------------------------------------------

// addr

// string ip = 1;
inline void addr::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& addr::ip() const {
  // @@protoc_insertion_point(field_get:pb.internal.addr.ip)
  return ip_.GetNoArena();
}
inline void addr::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.internal.addr.ip)
}
#if LANG_CXX11
inline void addr::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.internal.addr.ip)
}
#endif
inline void addr::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.internal.addr.ip)
}
inline void addr::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.internal.addr.ip)
}
inline ::std::string* addr::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:pb.internal.addr.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* addr::release_ip() {
  // @@protoc_insertion_point(field_release:pb.internal.addr.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void addr::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:pb.internal.addr.ip)
}

// int32 port = 2;
inline void addr::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 addr::port() const {
  // @@protoc_insertion_point(field_get:pb.internal.addr.port)
  return port_;
}
inline void addr::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:pb.internal.addr.port)
}

// int32 type = 3;
inline void addr::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 addr::type() const {
  // @@protoc_insertion_point(field_get:pb.internal.addr.type)
  return type_;
}
inline void addr::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.internal.addr.type)
}

// -------------------------------------------------------------------

// logon_ack

// int32 id = 1;
inline void logon_ack::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 logon_ack::id() const {
  // @@protoc_insertion_point(field_get:pb.internal.logon_ack.id)
  return id_;
}
inline void logon_ack::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.internal.logon_ack.id)
}

// int32 central_id = 2;
inline void logon_ack::clear_central_id() {
  central_id_ = 0;
}
inline ::google::protobuf::int32 logon_ack::central_id() const {
  // @@protoc_insertion_point(field_get:pb.internal.logon_ack.central_id)
  return central_id_;
}
inline void logon_ack::set_central_id(::google::protobuf::int32 value) {
  
  central_id_ = value;
  // @@protoc_insertion_point(field_set:pb.internal.logon_ack.central_id)
}

// repeated .pb.internal.addr link_addr = 3;
inline int logon_ack::link_addr_size() const {
  return link_addr_.size();
}
inline void logon_ack::clear_link_addr() {
  link_addr_.Clear();
}
inline ::pb::internal::addr* logon_ack::mutable_link_addr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.internal.logon_ack.link_addr)
  return link_addr_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::internal::addr >*
logon_ack::mutable_link_addr() {
  // @@protoc_insertion_point(field_mutable_list:pb.internal.logon_ack.link_addr)
  return &link_addr_;
}
inline const ::pb::internal::addr& logon_ack::link_addr(int index) const {
  // @@protoc_insertion_point(field_get:pb.internal.logon_ack.link_addr)
  return link_addr_.Get(index);
}
inline ::pb::internal::addr* logon_ack::add_link_addr() {
  // @@protoc_insertion_point(field_add:pb.internal.logon_ack.link_addr)
  return link_addr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::internal::addr >&
logon_ack::link_addr() const {
  // @@protoc_insertion_point(field_list:pb.internal.logon_ack.link_addr)
  return link_addr_;
}

// -------------------------------------------------------------------

// register_info

// int32 id = 1;
inline void register_info::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 register_info::id() const {
  // @@protoc_insertion_point(field_get:pb.internal.register_info.id)
  return id_;
}
inline void register_info::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.internal.register_info.id)
}

// int32 type = 2;
inline void register_info::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 register_info::type() const {
  // @@protoc_insertion_point(field_get:pb.internal.register_info.type)
  return type_;
}
inline void register_info::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.internal.register_info.type)
}

// -------------------------------------------------------------------

// vid_range

// int32 begin = 1;
inline void vid_range::clear_begin() {
  begin_ = 0;
}
inline ::google::protobuf::int32 vid_range::begin() const {
  // @@protoc_insertion_point(field_get:pb.internal.vid_range.begin)
  return begin_;
}
inline void vid_range::set_begin(::google::protobuf::int32 value) {
  
  begin_ = value;
  // @@protoc_insertion_point(field_set:pb.internal.vid_range.begin)
}

// int32 end = 2;
inline void vid_range::clear_end() {
  end_ = 0;
}
inline ::google::protobuf::int32 vid_range::end() const {
  // @@protoc_insertion_point(field_get:pb.internal.vid_range.end)
  return end_;
}
inline void vid_range::set_end(::google::protobuf::int32 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:pb.internal.vid_range.end)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace internal
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_internal_2eproto
