// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal.proto

#include "internal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_internal_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_internal_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_addr;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_internal_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_range;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_internal_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_mid_range;
}  // namespace protobuf_internal_2eproto
namespace pb {
namespace internal {
class logonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<logon>
      _instance;
} _logon_default_instance_;
class addrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<addr>
      _instance;
} _addr_default_instance_;
class logon_ackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<logon_ack>
      _instance;
} _logon_ack_default_instance_;
class register_infoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<register_info>
      _instance;
} _register_info_default_instance_;
class rangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<range>
      _instance;
} _range_default_instance_;
class mid_rangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mid_range>
      _instance;
} _mid_range_default_instance_;
class balance_listDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<balance_list>
      _instance;
} _balance_list_default_instance_;
}  // namespace internal
}  // namespace pb
namespace protobuf_internal_2eproto {
static void InitDefaultslogon() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::internal::_logon_default_instance_;
    new (ptr) ::pb::internal::logon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::internal::logon::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_logon =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultslogon}, {}};

static void InitDefaultsaddr() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::internal::_addr_default_instance_;
    new (ptr) ::pb::internal::addr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::internal::addr::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_addr =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsaddr}, {}};

static void InitDefaultslogon_ack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::internal::_logon_ack_default_instance_;
    new (ptr) ::pb::internal::logon_ack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::internal::logon_ack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_logon_ack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultslogon_ack}, {
      &protobuf_internal_2eproto::scc_info_addr.base,}};

static void InitDefaultsregister_info() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::internal::_register_info_default_instance_;
    new (ptr) ::pb::internal::register_info();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::internal::register_info::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_register_info =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsregister_info}, {}};

static void InitDefaultsrange() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::internal::_range_default_instance_;
    new (ptr) ::pb::internal::range();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::internal::range::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_range =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrange}, {}};

static void InitDefaultsmid_range() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::internal::_mid_range_default_instance_;
    new (ptr) ::pb::internal::mid_range();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::internal::mid_range::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_mid_range =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmid_range}, {
      &protobuf_internal_2eproto::scc_info_range.base,}};

static void InitDefaultsbalance_list() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::internal::_balance_list_default_instance_;
    new (ptr) ::pb::internal::balance_list();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::internal::balance_list::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_balance_list =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsbalance_list}, {
      &protobuf_internal_2eproto::scc_info_mid_range.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_logon.base);
  ::google::protobuf::internal::InitSCC(&scc_info_addr.base);
  ::google::protobuf::internal::InitSCC(&scc_info_logon_ack.base);
  ::google::protobuf::internal::InitSCC(&scc_info_register_info.base);
  ::google::protobuf::internal::InitSCC(&scc_info_range.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mid_range.base);
  ::google::protobuf::internal::InitSCC(&scc_info_balance_list.base);
}

::google::protobuf::Metadata file_level_metadata[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::internal::logon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::internal::logon, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::internal::logon, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::internal::logon, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::internal::addr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::internal::addr, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::internal::addr, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::internal::addr, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::internal::logon_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::internal::logon_ack, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::internal::logon_ack, central_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::internal::logon_ack, link_addr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::internal::register_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::internal::register_info, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::internal::register_info, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::internal::register_info, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::internal::register_info, port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::internal::range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::internal::range, begin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::internal::range, end_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::internal::mid_range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::internal::mid_range, mid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::internal::mid_range, range_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::internal::balance_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::internal::balance_list, range_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::internal::logon)},
  { 8, -1, sizeof(::pb::internal::addr)},
  { 16, -1, sizeof(::pb::internal::logon_ack)},
  { 24, -1, sizeof(::pb::internal::register_info)},
  { 33, -1, sizeof(::pb::internal::range)},
  { 40, -1, sizeof(::pb::internal::mid_range)},
  { 47, -1, sizeof(::pb::internal::balance_list)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::internal::_logon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::internal::_addr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::internal::_logon_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::internal::_register_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::internal::_range_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::internal::_mid_range_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::internal::_balance_list_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "internal.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016internal.proto\022\013pb.internal\"/\n\005logon\022\n"
      "\n\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\005\022\014\n\004type\030\003 \001(\005\"."
      "\n\004addr\022\n\n\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\005\022\014\n\004type"
      "\030\003 \001(\005\"Q\n\tlogon_ack\022\n\n\002id\030\001 \001(\005\022\022\n\ncentr"
      "al_id\030\002 \001(\005\022$\n\tlink_addr\030\003 \003(\0132\021.pb.inte"
      "rnal.addr\"C\n\rregister_info\022\n\n\002id\030\001 \001(\005\022\014"
      "\n\004type\030\002 \001(\005\022\n\n\002ip\030\003 \001(\t\022\014\n\004port\030\004 \001(\005\"#"
      "\n\005range\022\r\n\005begin\030\001 \001(\005\022\013\n\003end\030\002 \001(\005\";\n\tm"
      "id_range\022\013\n\003mid\030\001 \001(\005\022!\n\005range\030\002 \001(\0132\022.p"
      "b.internal.range\"5\n\014balance_list\022%\n\005rang"
      "e\030\001 \003(\0132\026.pb.internal.mid_rangeb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 439);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "internal.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_internal_2eproto
namespace pb {
namespace internal {

// ===================================================================

void logon::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int logon::kIpFieldNumber;
const int logon::kPortFieldNumber;
const int logon::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

logon::logon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_internal_2eproto::scc_info_logon.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.internal.logon)
}
logon::logon(const logon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&port_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:pb.internal.logon)
}

void logon::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&port_)) + sizeof(type_));
}

logon::~logon() {
  // @@protoc_insertion_point(destructor:pb.internal.logon)
  SharedDtor();
}

void logon::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void logon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* logon::descriptor() {
  ::protobuf_internal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_internal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const logon& logon::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_internal_2eproto::scc_info_logon.base);
  return *internal_default_instance();
}


void logon::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.internal.logon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&port_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool logon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.internal.logon)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.internal.logon.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.internal.logon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.internal.logon)
  return false;
#undef DO_
}

void logon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.internal.logon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.internal.logon.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.internal.logon)
}

::google::protobuf::uint8* logon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.internal.logon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.internal.logon.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.internal.logon)
  return target;
}

size_t logon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.internal.logon)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void logon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.internal.logon)
  GOOGLE_DCHECK_NE(&from, this);
  const logon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const logon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.internal.logon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.internal.logon)
    MergeFrom(*source);
  }
}

void logon::MergeFrom(const logon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.internal.logon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void logon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.internal.logon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void logon::CopyFrom(const logon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.internal.logon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool logon::IsInitialized() const {
  return true;
}

void logon::Swap(logon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void logon::InternalSwap(logon* other) {
  using std::swap;
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata logon::GetMetadata() const {
  protobuf_internal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_internal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void addr::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int addr::kIpFieldNumber;
const int addr::kPortFieldNumber;
const int addr::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

addr::addr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_internal_2eproto::scc_info_addr.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.internal.addr)
}
addr::addr(const addr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&port_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:pb.internal.addr)
}

void addr::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&port_)) + sizeof(type_));
}

addr::~addr() {
  // @@protoc_insertion_point(destructor:pb.internal.addr)
  SharedDtor();
}

void addr::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void addr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* addr::descriptor() {
  ::protobuf_internal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_internal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const addr& addr::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_internal_2eproto::scc_info_addr.base);
  return *internal_default_instance();
}


void addr::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.internal.addr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&port_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool addr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.internal.addr)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.internal.addr.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.internal.addr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.internal.addr)
  return false;
#undef DO_
}

void addr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.internal.addr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.internal.addr.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.internal.addr)
}

::google::protobuf::uint8* addr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.internal.addr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.internal.addr.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.internal.addr)
  return target;
}

size_t addr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.internal.addr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void addr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.internal.addr)
  GOOGLE_DCHECK_NE(&from, this);
  const addr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const addr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.internal.addr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.internal.addr)
    MergeFrom(*source);
  }
}

void addr::MergeFrom(const addr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.internal.addr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void addr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.internal.addr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void addr::CopyFrom(const addr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.internal.addr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addr::IsInitialized() const {
  return true;
}

void addr::Swap(addr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void addr::InternalSwap(addr* other) {
  using std::swap;
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata addr::GetMetadata() const {
  protobuf_internal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_internal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void logon_ack::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int logon_ack::kIdFieldNumber;
const int logon_ack::kCentralIdFieldNumber;
const int logon_ack::kLinkAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

logon_ack::logon_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_internal_2eproto::scc_info_logon_ack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.internal.logon_ack)
}
logon_ack::logon_ack(const logon_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      link_addr_(from.link_addr_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&central_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(central_id_));
  // @@protoc_insertion_point(copy_constructor:pb.internal.logon_ack)
}

void logon_ack::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&central_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(central_id_));
}

logon_ack::~logon_ack() {
  // @@protoc_insertion_point(destructor:pb.internal.logon_ack)
  SharedDtor();
}

void logon_ack::SharedDtor() {
}

void logon_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* logon_ack::descriptor() {
  ::protobuf_internal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_internal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const logon_ack& logon_ack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_internal_2eproto::scc_info_logon_ack.base);
  return *internal_default_instance();
}


void logon_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.internal.logon_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  link_addr_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&central_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(central_id_));
  _internal_metadata_.Clear();
}

bool logon_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.internal.logon_ack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 central_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &central_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.internal.addr link_addr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_link_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.internal.logon_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.internal.logon_ack)
  return false;
#undef DO_
}

void logon_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.internal.logon_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 central_id = 2;
  if (this->central_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->central_id(), output);
  }

  // repeated .pb.internal.addr link_addr = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->link_addr_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->link_addr(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.internal.logon_ack)
}

::google::protobuf::uint8* logon_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.internal.logon_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 central_id = 2;
  if (this->central_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->central_id(), target);
  }

  // repeated .pb.internal.addr link_addr = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->link_addr_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->link_addr(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.internal.logon_ack)
  return target;
}

size_t logon_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.internal.logon_ack)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .pb.internal.addr link_addr = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->link_addr_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->link_addr(static_cast<int>(i)));
    }
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 central_id = 2;
  if (this->central_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->central_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void logon_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.internal.logon_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const logon_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const logon_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.internal.logon_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.internal.logon_ack)
    MergeFrom(*source);
  }
}

void logon_ack::MergeFrom(const logon_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.internal.logon_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  link_addr_.MergeFrom(from.link_addr_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.central_id() != 0) {
    set_central_id(from.central_id());
  }
}

void logon_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.internal.logon_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void logon_ack::CopyFrom(const logon_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.internal.logon_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool logon_ack::IsInitialized() const {
  return true;
}

void logon_ack::Swap(logon_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void logon_ack::InternalSwap(logon_ack* other) {
  using std::swap;
  CastToBase(&link_addr_)->InternalSwap(CastToBase(&other->link_addr_));
  swap(id_, other->id_);
  swap(central_id_, other->central_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata logon_ack::GetMetadata() const {
  protobuf_internal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_internal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void register_info::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int register_info::kIdFieldNumber;
const int register_info::kTypeFieldNumber;
const int register_info::kIpFieldNumber;
const int register_info::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

register_info::register_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_internal_2eproto::scc_info_register_info.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.internal.register_info)
}
register_info::register_info(const register_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&id_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:pb.internal.register_info)
}

void register_info::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&id_)) + sizeof(port_));
}

register_info::~register_info() {
  // @@protoc_insertion_point(destructor:pb.internal.register_info)
  SharedDtor();
}

void register_info::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void register_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* register_info::descriptor() {
  ::protobuf_internal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_internal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const register_info& register_info::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_internal_2eproto::scc_info_register_info.base);
  return *internal_default_instance();
}


void register_info::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.internal.register_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&id_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

bool register_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.internal.register_info)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.internal.register_info.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.internal.register_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.internal.register_info)
  return false;
#undef DO_
}

void register_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.internal.register_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.internal.register_info.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // int32 port = 4;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.internal.register_info)
}

::google::protobuf::uint8* register_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.internal.register_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.internal.register_info.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // int32 port = 4;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.internal.register_info)
  return target;
}

size_t register_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.internal.register_info)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void register_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.internal.register_info)
  GOOGLE_DCHECK_NE(&from, this);
  const register_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const register_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.internal.register_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.internal.register_info)
    MergeFrom(*source);
  }
}

void register_info::MergeFrom(const register_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.internal.register_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void register_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.internal.register_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void register_info::CopyFrom(const register_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.internal.register_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool register_info::IsInitialized() const {
  return true;
}

void register_info::Swap(register_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void register_info::InternalSwap(register_info* other) {
  using std::swap;
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata register_info::GetMetadata() const {
  protobuf_internal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_internal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void range::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int range::kBeginFieldNumber;
const int range::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

range::range()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_internal_2eproto::scc_info_range.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.internal.range)
}
range::range(const range& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&begin_, &from.begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&begin_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:pb.internal.range)
}

void range::SharedCtor() {
  ::memset(&begin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&begin_)) + sizeof(end_));
}

range::~range() {
  // @@protoc_insertion_point(destructor:pb.internal.range)
  SharedDtor();
}

void range::SharedDtor() {
}

void range::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* range::descriptor() {
  ::protobuf_internal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_internal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const range& range::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_internal_2eproto::scc_info_range.base);
  return *internal_default_instance();
}


void range::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.internal.range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&begin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&begin_)) + sizeof(end_));
  _internal_metadata_.Clear();
}

bool range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.internal.range)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 begin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.internal.range)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.internal.range)
  return false;
#undef DO_
}

void range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.internal.range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 begin = 1;
  if (this->begin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->begin(), output);
  }

  // int32 end = 2;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.internal.range)
}

::google::protobuf::uint8* range::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.internal.range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 begin = 1;
  if (this->begin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->begin(), target);
  }

  // int32 end = 2;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.internal.range)
  return target;
}

size_t range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.internal.range)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 begin = 1;
  if (this->begin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->begin());
  }

  // int32 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void range::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.internal.range)
  GOOGLE_DCHECK_NE(&from, this);
  const range* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const range>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.internal.range)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.internal.range)
    MergeFrom(*source);
  }
}

void range::MergeFrom(const range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.internal.range)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.begin() != 0) {
    set_begin(from.begin());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void range::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.internal.range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void range::CopyFrom(const range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.internal.range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool range::IsInitialized() const {
  return true;
}

void range::Swap(range* other) {
  if (other == this) return;
  InternalSwap(other);
}
void range::InternalSwap(range* other) {
  using std::swap;
  swap(begin_, other->begin_);
  swap(end_, other->end_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata range::GetMetadata() const {
  protobuf_internal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_internal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void mid_range::InitAsDefaultInstance() {
  ::pb::internal::_mid_range_default_instance_._instance.get_mutable()->range_ = const_cast< ::pb::internal::range*>(
      ::pb::internal::range::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mid_range::kMidFieldNumber;
const int mid_range::kRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mid_range::mid_range()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_internal_2eproto::scc_info_mid_range.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.internal.mid_range)
}
mid_range::mid_range(const mid_range& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_range()) {
    range_ = new ::pb::internal::range(*from.range_);
  } else {
    range_ = NULL;
  }
  mid_ = from.mid_;
  // @@protoc_insertion_point(copy_constructor:pb.internal.mid_range)
}

void mid_range::SharedCtor() {
  ::memset(&range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mid_) -
      reinterpret_cast<char*>(&range_)) + sizeof(mid_));
}

mid_range::~mid_range() {
  // @@protoc_insertion_point(destructor:pb.internal.mid_range)
  SharedDtor();
}

void mid_range::SharedDtor() {
  if (this != internal_default_instance()) delete range_;
}

void mid_range::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* mid_range::descriptor() {
  ::protobuf_internal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_internal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const mid_range& mid_range::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_internal_2eproto::scc_info_mid_range.base);
  return *internal_default_instance();
}


void mid_range::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.internal.mid_range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && range_ != NULL) {
    delete range_;
  }
  range_ = NULL;
  mid_ = 0;
  _internal_metadata_.Clear();
}

bool mid_range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.internal.mid_range)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 mid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.internal.range range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.internal.mid_range)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.internal.mid_range)
  return false;
#undef DO_
}

void mid_range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.internal.mid_range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mid(), output);
  }

  // .pb.internal.range range = 2;
  if (this->has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_range(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.internal.mid_range)
}

::google::protobuf::uint8* mid_range::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.internal.mid_range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mid = 1;
  if (this->mid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mid(), target);
  }

  // .pb.internal.range range = 2;
  if (this->has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_range(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.internal.mid_range)
  return target;
}

size_t mid_range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.internal.mid_range)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .pb.internal.range range = 2;
  if (this->has_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *range_);
  }

  // int32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mid_range::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.internal.mid_range)
  GOOGLE_DCHECK_NE(&from, this);
  const mid_range* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mid_range>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.internal.mid_range)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.internal.mid_range)
    MergeFrom(*source);
  }
}

void mid_range::MergeFrom(const mid_range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.internal.mid_range)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_range()) {
    mutable_range()->::pb::internal::range::MergeFrom(from.range());
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
}

void mid_range::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.internal.mid_range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mid_range::CopyFrom(const mid_range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.internal.mid_range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mid_range::IsInitialized() const {
  return true;
}

void mid_range::Swap(mid_range* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mid_range::InternalSwap(mid_range* other) {
  using std::swap;
  swap(range_, other->range_);
  swap(mid_, other->mid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mid_range::GetMetadata() const {
  protobuf_internal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_internal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void balance_list::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int balance_list::kRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

balance_list::balance_list()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_internal_2eproto::scc_info_balance_list.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.internal.balance_list)
}
balance_list::balance_list(const balance_list& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      range_(from.range_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.internal.balance_list)
}

void balance_list::SharedCtor() {
}

balance_list::~balance_list() {
  // @@protoc_insertion_point(destructor:pb.internal.balance_list)
  SharedDtor();
}

void balance_list::SharedDtor() {
}

void balance_list::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* balance_list::descriptor() {
  ::protobuf_internal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_internal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const balance_list& balance_list::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_internal_2eproto::scc_info_balance_list.base);
  return *internal_default_instance();
}


void balance_list::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.internal.balance_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  range_.Clear();
  _internal_metadata_.Clear();
}

bool balance_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.internal.balance_list)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.internal.mid_range range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.internal.balance_list)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.internal.balance_list)
  return false;
#undef DO_
}

void balance_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.internal.balance_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.internal.mid_range range = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->range_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->range(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.internal.balance_list)
}

::google::protobuf::uint8* balance_list::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.internal.balance_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.internal.mid_range range = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->range_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->range(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.internal.balance_list)
  return target;
}

size_t balance_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.internal.balance_list)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .pb.internal.mid_range range = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->range_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->range(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void balance_list::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.internal.balance_list)
  GOOGLE_DCHECK_NE(&from, this);
  const balance_list* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const balance_list>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.internal.balance_list)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.internal.balance_list)
    MergeFrom(*source);
  }
}

void balance_list::MergeFrom(const balance_list& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.internal.balance_list)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  range_.MergeFrom(from.range_);
}

void balance_list::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.internal.balance_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void balance_list::CopyFrom(const balance_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.internal.balance_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool balance_list::IsInitialized() const {
  return true;
}

void balance_list::Swap(balance_list* other) {
  if (other == this) return;
  InternalSwap(other);
}
void balance_list::InternalSwap(balance_list* other) {
  using std::swap;
  CastToBase(&range_)->InternalSwap(CastToBase(&other->range_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata balance_list::GetMetadata() const {
  protobuf_internal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_internal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace internal
}  // namespace pb
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::internal::logon* Arena::CreateMaybeMessage< ::pb::internal::logon >(Arena* arena) {
  return Arena::CreateInternal< ::pb::internal::logon >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::internal::addr* Arena::CreateMaybeMessage< ::pb::internal::addr >(Arena* arena) {
  return Arena::CreateInternal< ::pb::internal::addr >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::internal::logon_ack* Arena::CreateMaybeMessage< ::pb::internal::logon_ack >(Arena* arena) {
  return Arena::CreateInternal< ::pb::internal::logon_ack >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::internal::register_info* Arena::CreateMaybeMessage< ::pb::internal::register_info >(Arena* arena) {
  return Arena::CreateInternal< ::pb::internal::register_info >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::internal::range* Arena::CreateMaybeMessage< ::pb::internal::range >(Arena* arena) {
  return Arena::CreateInternal< ::pb::internal::range >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::internal::mid_range* Arena::CreateMaybeMessage< ::pb::internal::mid_range >(Arena* arena) {
  return Arena::CreateInternal< ::pb::internal::mid_range >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::internal::balance_list* Arena::CreateMaybeMessage< ::pb::internal::balance_list >(Arena* arena) {
  return Arena::CreateInternal< ::pb::internal::balance_list >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
